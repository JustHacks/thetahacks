{"ast":null,"code":"\"use strict\";\n\nconst sqlite = require('sqlite');\n\nconst sqlite3 = require('sqlite3');\n\nconst bcrypt = require('bcrypt');\n\nclass User {\n  constructor(name, email, hash, photo) {\n    this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n    this.email = email;\n    this.hash = hash;\n    this.photo = photo;\n  }\n\n  static async create(name, email, password, photo) {\n    return new User(name, await bcrypt.hash(password, 10), photo);\n  }\n\n  async verify(password) {\n    return await bcrypt.compare(password, this.hash);\n  }\n\n}\n\nclass Charity {\n  constructor(name, photo, owner, desc, website, tags, venmo, gofundme) {\n    this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n    this.photo = photo;\n    this.owner = owner.replace(/[^A-Za-z0-9- ]/g, '');\n    this.desc = desc;\n    this.website = website.replace(/[^A-Za-z0-9-/:?&. ]/g, '');\n    this.tags = tags.replace(/[^A-Za-z0-9- ]/g, '');\n    this.venmo = venmo;\n    this.gofundme = gofundme;\n  }\n\n}\n\nclass Database {\n  constructor(filename, db) {\n    this.filename = filename;\n    this.db = db;\n  }\n\n  static async create(filename) {\n    const db = await sqlite.open({\n      filename,\n      driver: sqlite3.Database\n    });\n    await db.run(\"CREATE TABLE IF NOT EXISTS users (name text, email text, hash text, photo text)\");\n    await db.run(\"CREATE TABLE IF NOT EXISTS charities (name text, photo text, owner text, desc text, website text, tags text, venmo text, gofundme text)\");\n    return new Database(filename, db);\n  }\n\n  async readUser(name) {\n    const row = await this.db.get(\"SELECT hash, photo FROM users WHERE name=?\", name);\n\n    if (!row) {\n      return undefined;\n    }\n\n    return new User(name, row.email, row.hash, row.photo);\n  }\n\n  async writeUser(user) {\n    await this.db.run(\"INSERT INTO users VALUES (?, ?, ?, ?)\", user.name, user.email, user.hash, user.photo);\n  }\n\n  async readCharity(name) {\n    const row = await this.db.get(\"SELECT photo, owner, desc, website, tags, venmo, gofundme FROM charities WHERE name=?\", name);\n\n    if (!row) {\n      return undefined;\n    }\n\n    return new Charity(name, row.photo, row.owner, row.desc, row.website, row.tags, row.venmo, row.gofundme);\n  }\n\n  async writeCharity(charity) {\n    await this.db.run(\"INSERT INTO charities VALUES (?, ?, ?, ?, ?, ?, ?, ?)\", charity.name, charity.photo, charity.owner, charity.desc, charity.website, charity.tags, charity.venmo, charity.gofundme);\n  }\n\n  async filterCharity(name, tags) {\n    name = name.replace(/[^a-zA-Z0-9- ]/g, ''); // aha best validation\n\n    tags = tags.replace(/[^a-zA-Z0-9- ]/g, ''); // still feels like quite vulnerable code :thonk:\n\n    return await this.db.all(\"SELECT * FROM charities WHERE name LIKE ? OR tags LIKE ?\", `%${name}%`, `%${tags}%`); // major cve vibes here\n  }\n\n  close() {\n    this.db.close();\n  }\n\n}\n\nmodule.exports = {\n  User,\n  Charity,\n  Database\n};","map":{"version":3,"sources":["/home/runner/thetahacks/server/db.js"],"names":["sqlite","require","sqlite3","bcrypt","User","constructor","name","email","hash","photo","replace","create","password","verify","compare","Charity","owner","desc","website","tags","venmo","gofundme","Database","filename","db","open","driver","run","readUser","row","get","undefined","writeUser","user","readCharity","writeCharity","charity","filterCharity","all","close","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst sqlite = require('sqlite');\nconst sqlite3 = require('sqlite3');\nconst bcrypt = require('bcrypt');\n\nclass User {\n    constructor(name, email, hash, photo) {\n        this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n        this.email = email;\n        this.hash = hash;\n        this.photo = photo;\n    }\n\n    static async create(name, email, password, photo) {\n        return new User(name, await bcrypt.hash(password, 10), photo);\n    }\n\n    async verify(password) {\n        return await bcrypt.compare(password, this.hash);\n    }\n}\n\nclass Charity {\n    constructor(name, photo, owner, desc, website, tags, venmo, gofundme) {\n        this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n        this.photo = photo;\n        this.owner = owner.replace(/[^A-Za-z0-9- ]/g, '');\n        this.desc = desc;\n        this.website = website.replace(/[^A-Za-z0-9-/:?&. ]/g, '');\n        this.tags = tags.replace(/[^A-Za-z0-9- ]/g, '');\n        this.venmo = venmo;\n        this.gofundme = gofundme;\n    }\n}\n\nclass Database {\n    constructor(filename, db) {\n        this.filename = filename;\n        this.db = db;\n    }\n\n    static async create(filename) {\n        const db = await sqlite.open({\n            filename,\n            driver: sqlite3.Database\n        });\n        await db.run(\"CREATE TABLE IF NOT EXISTS users (name text, email text, hash text, photo text)\");\n        await db.run(\"CREATE TABLE IF NOT EXISTS charities (name text, photo text, owner text, desc text, website text, tags text, venmo text, gofundme text)\");\n        return new Database(filename, db);\n    }\n\n    async readUser(name) {\n        const row = await this.db.get(\"SELECT hash, photo FROM users WHERE name=?\", name);\n        if (!row) {\n            return undefined;\n        }\n        return new User(name, row.email, row.hash, row.photo);\n    }\n\n    async writeUser(user) {\n        await this.db.run(\"INSERT INTO users VALUES (?, ?, ?, ?)\", user.name, user.email, user.hash, user.photo);\n    }\n\n    async readCharity(name) {\n        const row = await this.db.get(\"SELECT photo, owner, desc, website, tags, venmo, gofundme FROM charities WHERE name=?\", name);\n        if (!row) {\n            return undefined;\n        }\n        return new Charity(name, row.photo, row.owner, row.desc, row.website, row.tags, row.venmo, row.gofundme);\n    }\n\n    async writeCharity(charity) {\n        await this.db.run(\"INSERT INTO charities VALUES (?, ?, ?, ?, ?, ?, ?, ?)\", charity.name, charity.photo, charity.owner, charity.desc, charity.website, charity.tags, charity.venmo, charity.gofundme);\n    }\n\n    async filterCharity(name, tags) {\n        name = name.replace(/[^a-zA-Z0-9- ]/g, ''); // aha best validation\n        tags = tags.replace(/[^a-zA-Z0-9- ]/g, ''); // still feels like quite vulnerable code :thonk:\n        return await this.db.all(\"SELECT * FROM charities WHERE name LIKE ? OR tags LIKE ?\", `%${name}%`, `%${tags}%`); // major cve vibes here\n    }\n\n    close() {\n        this.db.close();\n    }\n}\n\nmodule.exports = {\n    User, \n    Charity,\n    Database\n};"]},"metadata":{},"sourceType":"script"}