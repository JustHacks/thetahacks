{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar express = require(\"express\");\n\nvar db = require('./db');\n\nvar admin = require(\"firebase-admin\");\n\nvar server = express();\nserver.use(require('body-parser').json());\n\nvar newToken = function newToken() {\n  return Buffer.from(Math.random().toString()).toString('base64');\n};\n\nvar tokens = {};\nconsole.log('Initializing routes');\nvar database;\ndb.Database.create('app.db').then(function (d) {\n  database = d;\n});\nadmin.initializeApp({\n  credential: admin.credential.cert(require(\"./key\"))\n});\n/*\nserver.post('/api/users/read', async (req, res) => {\n\tconst { name, password } = req.body;\n\tconst user = await database.readUser(name);\n\t\n\tif (!user) {\n\t\treturn res.json({ ok: false, reason: \"User does not exist\" });\n\t}\n\n\tif (await user.verify(password)) {\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t} else {\n\t\tres.json({ ok: false, reason: \"Password incorrect\" });\n\t}\n});\n\nserver.post('/api/users/write', async (req, res) => {\n\t// kaka: add some firebase stuff here for file upload maybe?\n\tconst { name, email, password } = req.body;\n\t\n\tif (await database.readUser(name)) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"User already exists\"\n\t\t});\n\t} else {\n\t\tawait database.writeUser(await db.User.create(name, email, password, ''));\n\t\t\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t}\n});\n\nserver.post('/api/users/logout', async (req, res) => {\n\tconst { name, token } = req.body;\n\n\tif (tokens[name] != token) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"Provided token doesn't match user to logout\"\n\t\t});\n\t} else {\n\t\tdelete tokens[name];\n        res.json({\n            ok: true\n        });\n\t}\n});\n*/\n\nserver.post('/api/charities/read', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var name, charity;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            name = req.body.name;\n            _context.next = 3;\n            return database.readCharity(name);\n\n          case 3:\n            charity = _context.sent;\n\n            if (!charity) {\n              res.json({\n                ok: false,\n                reason: \"Charity doesn't exist\"\n              });\n            } else {\n              res.json({\n                ok: true,\n                charity: charity\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nserver.post('/api/charities/search', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n    var _req$body, name, tags, charities;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _req$body = req.body, name = _req$body.name, tags = _req$body.tags;\n            _context2.next = 3;\n            return database.filterCharity(name, tags);\n\n          case 3:\n            charities = _context2.sent;\n            res.json({\n              ok: true,\n              data: charities\n            });\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nserver.post('/api/charities/write', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n    var _req$body2, name, photo, desc, website, tags, venmo, gofundme, token, _yield$admin$auth$ver, owner;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _req$body2 = req.body, name = _req$body2.name, photo = _req$body2.photo, desc = _req$body2.desc, website = _req$body2.website, tags = _req$body2.tags, venmo = _req$body2.venmo, gofundme = _req$body2.gofundme, token = _req$body2.token;\n            _context3.next = 3;\n            return admin.auth().verifyIdToken(token);\n\n          case 3:\n            _yield$admin$auth$ver = _context3.sent;\n            owner = _yield$admin$auth$ver.uid;\n            _context3.next = 7;\n            return database.readCharity(name);\n\n          case 7:\n            if (!_context3.sent) {\n              _context3.next = 11;\n              break;\n            }\n\n            res.json({\n              ok: false,\n              reason: \"Charity already exists\"\n            });\n            _context3.next = 14;\n            break;\n\n          case 11:\n            _context3.next = 13;\n            return database.writeCharity(new db.Charity(name, photo, owner, desc, website, tags, venmo, gofundme));\n\n          case 13:\n            res.json({\n              ok: true\n            });\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nmodule.exports = server;","map":{"version":3,"sources":["/home/runner/thetahacks/server/index.js"],"names":["express","require","db","admin","server","use","json","newToken","Buffer","from","Math","random","toString","tokens","console","log","database","Database","create","then","d","initializeApp","credential","cert","post","req","res","name","body","readCharity","charity","ok","reason","tags","filterCharity","charities","data","photo","desc","website","venmo","gofundme","token","auth","verifyIdToken","owner","uid","writeCharity","Charity","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst express = require(\"express\");\nconst db = require('./db');\nconst admin = require(\"firebase-admin\");\n\nconst server = express();\n\nserver.use(require('body-parser').json());\n\nconst newToken = () => {\n    return Buffer.from(Math.random().toString()).toString('base64');\n};\nconst tokens = {};\n\nconsole.log('Initializing routes');\nlet database;\n\ndb.Database.create('app.db').then((d) => { database = d; });\nadmin.initializeApp({ credential: admin.credential.cert(require(\"./key\")) });\n\n/*\nserver.post('/api/users/read', async (req, res) => {\n\tconst { name, password } = req.body;\n\tconst user = await database.readUser(name);\n\t\n\tif (!user) {\n\t\treturn res.json({ ok: false, reason: \"User does not exist\" });\n\t}\n\n\tif (await user.verify(password)) {\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t} else {\n\t\tres.json({ ok: false, reason: \"Password incorrect\" });\n\t}\n});\n\nserver.post('/api/users/write', async (req, res) => {\n\t// kaka: add some firebase stuff here for file upload maybe?\n\tconst { name, email, password } = req.body;\n\t\n\tif (await database.readUser(name)) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"User already exists\"\n\t\t});\n\t} else {\n\t\tawait database.writeUser(await db.User.create(name, email, password, ''));\n\t\t\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t}\n});\n\nserver.post('/api/users/logout', async (req, res) => {\n\tconst { name, token } = req.body;\n\n\tif (tokens[name] != token) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"Provided token doesn't match user to logout\"\n\t\t});\n\t} else {\n\t\tdelete tokens[name];\n        res.json({\n            ok: true\n        });\n\t}\n});\n*/\n\nserver.post('/api/charities/read', async (req, res) => {\n\tconst { name } = req.body;\n\tconst charity = await database.readCharity(name);\n\n\tif (!charity) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"Charity doesn't exist\"\n\t\t});\n\t} else {\n\t\tres.json({\n\t\t\tok: true,\n\t\t\tcharity: charity\n\t\t});\n\t}\n});\n\nserver.post('/api/charities/search', async (req, res) => {\n\tconst { name, tags } = req.body;\n\tconst charities = await database.filterCharity(name, tags);\n\n\tres.json({\n\t\tok: true,\n\t\tdata: charities\n\t});\n});\n\nserver.post('/api/charities/write', async (req, res) => {\n\tconst { name, photo, desc, website, tags, venmo, gofundme, token } = req.body;\n\tconst { uid: owner } = await admin.auth().verifyIdToken(token);\n\n\tif (await database.readCharity(name)) {\n\t\tres.json({ ok: false, reason: \"Charity already exists\" });\n\t} else {\n\t\tawait database.writeCharity(new db.Charity(name, photo, owner, desc, website, tags, venmo, gofundme));\n\t\tres.json({ ok: true });\n\t}\n});\n\nmodule.exports = server;"]},"metadata":{},"sourceType":"script"}