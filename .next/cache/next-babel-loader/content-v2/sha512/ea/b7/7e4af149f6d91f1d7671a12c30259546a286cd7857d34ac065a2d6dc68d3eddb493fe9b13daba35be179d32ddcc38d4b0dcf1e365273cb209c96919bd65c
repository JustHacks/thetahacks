{"ast":null,"code":"\"use strict\";\n\nconst express = require(\"express\");\n\nconst db = require('./db');\n\nconst admin = require(\"firebase-admin\");\n\nconst server = express();\nserver.use(require('body-parser').json());\n\nconst newToken = () => {\n  return Buffer.from(Math.random().toString()).toString('base64');\n};\n\nconst tokens = {};\nconsole.log('Initializing routes');\nlet database;\ndb.Database.create('app.db').then(d => {\n  database = d;\n});\nadmin.initializeApp({\n  credential: admin.credential.cert(require(\"./key\"))\n});\n/*\nserver.post('/api/users/read', async (req, res) => {\n\tconst { name, password } = req.body;\n\tconst user = await database.readUser(name);\n\t\n\tif (!user) {\n\t\treturn res.json({ ok: false, reason: \"User does not exist\" });\n\t}\n\n\tif (await user.verify(password)) {\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t} else {\n\t\tres.json({ ok: false, reason: \"Password incorrect\" });\n\t}\n});\n\nserver.post('/api/users/write', async (req, res) => {\n\t// kaka: add some firebase stuff here for file upload maybe?\n\tconst { name, email, password } = req.body;\n\t\n\tif (await database.readUser(name)) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"User already exists\"\n\t\t});\n\t} else {\n\t\tawait database.writeUser(await db.User.create(name, email, password, ''));\n\t\t\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t}\n});\n\nserver.post('/api/users/logout', async (req, res) => {\n\tconst { name, token } = req.body;\n\n\tif (tokens[name] != token) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"Provided token doesn't match user to logout\"\n\t\t});\n\t} else {\n\t\tdelete tokens[name];\n        res.json({\n            ok: true\n        });\n\t}\n});\n*/\n\nserver.post('/api/charities/read', async (req, res) => {\n  const {\n    name\n  } = req.body;\n  const charity = await database.readCharity(name);\n\n  if (!charity) {\n    res.json({\n      ok: false,\n      reason: \"Charity doesn't exist\"\n    });\n  } else {\n    res.json({\n      ok: true,\n      charity: charity\n    });\n  }\n});\nserver.post('/api/charities/search', async (req, res) => {\n  const {\n    name,\n    tags\n  } = req.body;\n  const charities = await database.filterCharity(name, tags);\n  res.json({\n    ok: true,\n    data: charities\n  });\n});\nserver.post('/api/charities/write', async (req, res) => {\n  const {\n    name,\n    photo,\n    desc,\n    website,\n    tags,\n    venmo,\n    gofundme,\n    token\n  } = req.body;\n  const {\n    uid: owner\n  } = await admin.auth().verifyIdToken(token);\n\n  if (await database.readCharity(name)) {\n    res.json({\n      ok: false,\n      reason: \"Charity already exists\"\n    });\n  } else {\n    await database.writeCharity(new db.Charity(name, photo, owner, desc, website, tags, venmo, gofundme));\n    res.json({\n      ok: true\n    });\n  }\n});\nmodule.exports = server;","map":{"version":3,"sources":["/home/runner/thetahacks/server/index.js"],"names":["express","require","db","admin","server","use","json","newToken","Buffer","from","Math","random","toString","tokens","console","log","database","Database","create","then","d","initializeApp","credential","cert","post","req","res","name","body","charity","readCharity","ok","reason","tags","charities","filterCharity","data","photo","desc","website","venmo","gofundme","token","uid","owner","auth","verifyIdToken","writeCharity","Charity","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst express = require(\"express\");\nconst db = require('./db');\nconst admin = require(\"firebase-admin\");\n\nconst server = express();\n\nserver.use(require('body-parser').json());\n\nconst newToken = () => {\n    return Buffer.from(Math.random().toString()).toString('base64');\n};\nconst tokens = {};\n\nconsole.log('Initializing routes');\nlet database;\n\ndb.Database.create('app.db').then((d) => { database = d; });\nadmin.initializeApp({ credential: admin.credential.cert(require(\"./key\")) });\n\n/*\nserver.post('/api/users/read', async (req, res) => {\n\tconst { name, password } = req.body;\n\tconst user = await database.readUser(name);\n\t\n\tif (!user) {\n\t\treturn res.json({ ok: false, reason: \"User does not exist\" });\n\t}\n\n\tif (await user.verify(password)) {\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t} else {\n\t\tres.json({ ok: false, reason: \"Password incorrect\" });\n\t}\n});\n\nserver.post('/api/users/write', async (req, res) => {\n\t// kaka: add some firebase stuff here for file upload maybe?\n\tconst { name, email, password } = req.body;\n\t\n\tif (await database.readUser(name)) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"User already exists\"\n\t\t});\n\t} else {\n\t\tawait database.writeUser(await db.User.create(name, email, password, ''));\n\t\t\n\t\tres.json({\n\t\t\tok: true,\n\t\t\ttoken: tokens[name] || (tokens[name] = newToken()),\n\t\t\tuser: { name, email: user.email, photo: user.photo }\n\t\t});\n\t}\n});\n\nserver.post('/api/users/logout', async (req, res) => {\n\tconst { name, token } = req.body;\n\n\tif (tokens[name] != token) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"Provided token doesn't match user to logout\"\n\t\t});\n\t} else {\n\t\tdelete tokens[name];\n        res.json({\n            ok: true\n        });\n\t}\n});\n*/\n\nserver.post('/api/charities/read', async (req, res) => {\n\tconst { name } = req.body;\n\tconst charity = await database.readCharity(name);\n\n\tif (!charity) {\n\t\tres.json({\n\t\t\tok: false,\n\t\t\treason: \"Charity doesn't exist\"\n\t\t});\n\t} else {\n\t\tres.json({\n\t\t\tok: true,\n\t\t\tcharity: charity\n\t\t});\n\t}\n});\n\nserver.post('/api/charities/search', async (req, res) => {\n\tconst { name, tags } = req.body;\n\tconst charities = await database.filterCharity(name, tags);\n\n\tres.json({\n\t\tok: true,\n\t\tdata: charities\n\t});\n});\n\nserver.post('/api/charities/write', async (req, res) => {\n\tconst { name, photo, desc, website, tags, venmo, gofundme, token } = req.body;\n\tconst { uid: owner } = await admin.auth().verifyIdToken(token);\n\n\tif (await database.readCharity(name)) {\n\t\tres.json({ ok: false, reason: \"Charity already exists\" });\n\t} else {\n\t\tawait database.writeCharity(new db.Charity(name, photo, owner, desc, website, tags, venmo, gofundme));\n\t\tres.json({ ok: true });\n\t}\n});\n\nmodule.exports = server;"]},"metadata":{},"sourceType":"script"}