{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport firebase from \"firebase\";\nimport \"../../lib/api\";\n\nvar NewCharity = function NewCharity() {\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n      var email, password, setSubmitting;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              email = _ref.email, password = _ref.password;\n              setSubmitting = _ref2.setSubmitting;\n              // sen\n              setSubmitting(false);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var validate = function validate(_ref4) {\n    var photo = _ref4.photo,\n        name = _ref4.name,\n        description = _ref4.description,\n        donationLinks = _ref4.donationLinks,\n        website = _ref4.website;\n    var errors = {};\n    var url;\n\n    try {\n      url = new URL(website);\n    } catch (e) {\n      errors.website = \"Invalid donation links.\";\n      return;\n    }\n\n    if (url.protocol != \"https\" || url.protocol != \"http\") {\n      errors.donationLinks = \"Invalid donation links.\";\n      return;\n    }\n\n    if (name.length < 8) {\n      errors.name = \"Charity name too short.\";\n    } else if (name.length > 64) {\n      errors.name = \"Charity name too long.\";\n    } else if (description.length < 32) {\n      errors.description = \"Description too short.\";\n    } else if (description.length > 512) {\n      errors.description = \"Description too long.\";\n    } else if (photo.size > 1024 * 1024 * 5) {\n      errors.photo = \"File too large.\";\n    } else {\n      var dLinks = donationLinks.split(\",\").map(function (link) {\n        return link.trim();\n      }).filter(function (link) {\n        return link;\n      });\n      dLinks.forEach(function (link) {\n        var url;\n\n        try {\n          url = new URL(link);\n        } catch (e) {\n          errors.donationLinks = \"Invalid donation links.\";\n          return;\n        }\n\n        if (url.protocol != \"https\" || url.protocol != \"http\") {\n          errors.donationLinks = \"Invalid donation links.\";\n          return;\n        }\n      });\n    }\n\n    return errors;\n  };\n\n  return __jsx(Formik, {\n    initialValues: {\n      name: '',\n      description: '',\n      donationLinks: '',\n      website: ''\n    },\n    validate: validate,\n    onSubmit: onSubmit\n  }, function (_ref5) {\n    var values = _ref5.values,\n        errors = _ref5.errors,\n        touched = _ref5.touched,\n        handleChange = _ref5.handleChange,\n        handleBlur = _ref5.handleBlur,\n        handleSubmit = _ref5.handleSubmit,\n        isSubmitting = _ref5.isSubmitting,\n        setFieldValue = _ref5.setFieldValue;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"input\", {\n      type: \"file\",\n      name: \"photo\",\n      onChange: function onChange(e) {\n        return setFieldValue(\"photo\", e.target.files[0]);\n      },\n      onBlur: handleBlur\n    }), errors.photo && touched.photo && errors.photo, __jsx(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.name\n    }), errors.name && touched.name && errors.name, __jsx(\"textarea\", {\n      type: \"text\",\n      name: \"description\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.description\n    }), errors.description && touched.description && errors.description, __jsx(\"input\", {\n      type: \"text\",\n      name: \"website\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.website\n    }), errors.website && touched.website && errors.website, __jsx(\"input\", {\n      type: \"text\",\n      name: \"donationLinks\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.donationLinks\n    }), errors.donationLinks && touched.donationLinks && errors.donationLinks, __jsx(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \" Submit \"));\n  });\n};\n\nexport default NewCharity;","map":null,"metadata":{},"sourceType":"module"}