{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar sqlite = require('sqlite');\n\nvar sqlite3 = require('sqlite3');\n\nvar bcrypt = require('bcrypt');\n\nvar User = /*#__PURE__*/function () {\n  function User(name, email, hash, photo) {\n    _classCallCheck(this, User);\n\n    this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n    this.email = email;\n    this.hash = hash;\n    this.photo = photo;\n  }\n\n  _createClass(User, [{\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(password) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return bcrypt.compare(password, this.hash);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function verify(_x) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, email, password, photo) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = User;\n                _context2.t1 = name;\n                _context2.next = 4;\n                return bcrypt.hash(password, 10);\n\n              case 4:\n                _context2.t2 = _context2.sent;\n                _context2.t3 = photo;\n                return _context2.abrupt(\"return\", new _context2.t0(_context2.t1, _context2.t2, _context2.t3));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function create(_x2, _x3, _x4, _x5) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return User;\n}();\n\nvar Charity = function Charity(name, photo, owner, desc, website, tags, venmo, gofundme) {\n  _classCallCheck(this, Charity);\n\n  this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n  this.photo = photo;\n  this.owner = owner.replace(/[^A-Za-z0-9- ]/g, '');\n  this.desc = desc;\n  this.website = website.replace(/[^A-Za-z0-9-/:?&. ]/g, '');\n  this.tags = tags.replace(/[^A-Za-z0-9- ]/g, '');\n  this.venmo = venmo;\n  this.gofundme = gofundme;\n};\n\nvar Database = /*#__PURE__*/function () {\n  function Database(filename, db) {\n    _classCallCheck(this, Database);\n\n    this.filename = filename;\n    this.db = db;\n  }\n\n  _createClass(Database, [{\n    key: \"readUser\",\n    value: function () {\n      var _readUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {\n        var row;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.db.get(\"SELECT hash, photo FROM users WHERE name=?\", name);\n\n              case 2:\n                row = _context3.sent;\n\n                if (row) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", undefined);\n\n              case 5:\n                return _context3.abrupt(\"return\", new User(name, row.email, row.hash, row.photo));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function readUser(_x6) {\n        return _readUser.apply(this, arguments);\n      }\n\n      return readUser;\n    }()\n  }, {\n    key: \"writeUser\",\n    value: function () {\n      var _writeUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(user) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.db.run(\"INSERT INTO users VALUES (?, ?, ?, ?)\", user.name, user.email, user.hash, user.photo);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function writeUser(_x7) {\n        return _writeUser.apply(this, arguments);\n      }\n\n      return writeUser;\n    }()\n  }, {\n    key: \"readCharity\",\n    value: function () {\n      var _readCharity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {\n        var row;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.db.get(\"SELECT photo, owner, desc, website, tags, venmo, gofundme FROM charities WHERE name=?\", name);\n\n              case 2:\n                row = _context5.sent;\n\n                if (row) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", undefined);\n\n              case 5:\n                return _context5.abrupt(\"return\", new Charity(name, row.photo, row.owner, row.desc, row.website, row.tags, row.venmo, row.gofundme));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function readCharity(_x8) {\n        return _readCharity.apply(this, arguments);\n      }\n\n      return readCharity;\n    }()\n  }, {\n    key: \"writeCharity\",\n    value: function () {\n      var _writeCharity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(charity) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.db.run(\"INSERT INTO charities VALUES (?, ?, ?, ?, ?, ?, ?, ?)\", charity.name, charity.photo, charity.owner, charity.desc, charity.website, charity.tags, charity.venmo, charity.gofundme);\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function writeCharity(_x9) {\n        return _writeCharity.apply(this, arguments);\n      }\n\n      return writeCharity;\n    }()\n  }, {\n    key: \"filterCharity\",\n    value: function () {\n      var _filterCharity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(name, tags) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                name = name.replace(/[^a-zA-Z0-9- ]/g, ''); // aha best validation\n\n                tags = tags.replace(/[^a-zA-Z0-9- ]/g, ''); // still feels like quite vulnerable code :thonk:\n\n                _context7.next = 4;\n                return this.db.all(\"SELECT * FROM charities WHERE name LIKE ? OR tags LIKE ?\", \"%\".concat(name, \"%\"), \"%\".concat(tags, \"%\"));\n\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function filterCharity(_x10, _x11) {\n        return _filterCharity.apply(this, arguments);\n      }\n\n      return filterCharity;\n    }()\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.db.close();\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filename) {\n        var db;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return sqlite.open({\n                  filename: filename,\n                  driver: sqlite3.Database\n                });\n\n              case 2:\n                db = _context8.sent;\n                _context8.next = 5;\n                return db.run(\"CREATE TABLE IF NOT EXISTS users (name text, email text, hash text, photo text)\");\n\n              case 5:\n                _context8.next = 7;\n                return db.run(\"CREATE TABLE IF NOT EXISTS charities (name text, photo text, owner text, desc text, website text, tags text, venmo text, gofundme text)\");\n\n              case 7:\n                return _context8.abrupt(\"return\", new Database(filename, db));\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function create(_x12) {\n        return _create2.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return Database;\n}();\n\nmodule.exports = {\n  User: User,\n  Charity: Charity,\n  Database: Database\n};","map":{"version":3,"sources":["/home/runner/thetahacks/server/db.js"],"names":["sqlite","require","sqlite3","bcrypt","User","name","email","hash","photo","replace","password","compare","Charity","owner","desc","website","tags","venmo","gofundme","Database","filename","db","get","row","undefined","user","run","charity","all","close","open","driver","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst sqlite = require('sqlite');\nconst sqlite3 = require('sqlite3');\nconst bcrypt = require('bcrypt');\n\nclass User {\n    constructor(name, email, hash, photo) {\n        this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n        this.email = email;\n        this.hash = hash;\n        this.photo = photo;\n    }\n\n    static async create(name, email, password, photo) {\n        return new User(name, await bcrypt.hash(password, 10), photo);\n    }\n\n    async verify(password) {\n        return await bcrypt.compare(password, this.hash);\n    }\n}\n\nclass Charity {\n    constructor(name, photo, owner, desc, website, tags, venmo, gofundme) {\n        this.name = name.replace(/[^A-Za-z0-9- ]/g, '');\n        this.photo = photo;\n        this.owner = owner.replace(/[^A-Za-z0-9- ]/g, '');\n        this.desc = desc;\n        this.website = website.replace(/[^A-Za-z0-9-/:?&. ]/g, '');\n        this.tags = tags.replace(/[^A-Za-z0-9- ]/g, '');\n        this.venmo = venmo;\n        this.gofundme = gofundme;\n    }\n}\n\nclass Database {\n    constructor(filename, db) {\n        this.filename = filename;\n        this.db = db;\n    }\n\n    static async create(filename) {\n        const db = await sqlite.open({\n            filename,\n            driver: sqlite3.Database\n        });\n        await db.run(\"CREATE TABLE IF NOT EXISTS users (name text, email text, hash text, photo text)\");\n        await db.run(\"CREATE TABLE IF NOT EXISTS charities (name text, photo text, owner text, desc text, website text, tags text, venmo text, gofundme text)\");\n        return new Database(filename, db);\n    }\n\n    async readUser(name) {\n        const row = await this.db.get(\"SELECT hash, photo FROM users WHERE name=?\", name);\n        if (!row) {\n            return undefined;\n        }\n        return new User(name, row.email, row.hash, row.photo);\n    }\n\n    async writeUser(user) {\n        await this.db.run(\"INSERT INTO users VALUES (?, ?, ?, ?)\", user.name, user.email, user.hash, user.photo);\n    }\n\n    async readCharity(name) {\n        const row = await this.db.get(\"SELECT photo, owner, desc, website, tags, venmo, gofundme FROM charities WHERE name=?\", name);\n        if (!row) {\n            return undefined;\n        }\n        return new Charity(name, row.photo, row.owner, row.desc, row.website, row.tags, row.venmo, row.gofundme);\n    }\n\n    async writeCharity(charity) {\n        await this.db.run(\"INSERT INTO charities VALUES (?, ?, ?, ?, ?, ?, ?, ?)\", charity.name, charity.photo, charity.owner, charity.desc, charity.website, charity.tags, charity.venmo, charity.gofundme);\n    }\n\n    async filterCharity(name, tags) {\n        name = name.replace(/[^a-zA-Z0-9- ]/g, ''); // aha best validation\n        tags = tags.replace(/[^a-zA-Z0-9- ]/g, ''); // still feels like quite vulnerable code :thonk:\n        return await this.db.all(\"SELECT * FROM charities WHERE name LIKE ? OR tags LIKE ?\", `%${name}%`, `%${tags}%`); // major cve vibes here\n    }\n\n    close() {\n        this.db.close();\n    }\n}\n\nmodule.exports = {\n    User, \n    Charity,\n    Database\n};"]},"metadata":{},"sourceType":"script"}